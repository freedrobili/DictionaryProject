/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.tinkoff.eacq.mma.dictionary.rest.controller.api;

import ru.tinkoff.eacq.mma.dictionary.rest.model.Error;
import ru.tinkoff.eacq.mma.dictionary.rest.model.ShortCategories;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "AdminsCategories", description = "the AdminsCategories API")
public interface AdminsCategoriesApi {

    /**
     * GET /admin/api/v1/categories/{productName}
     *
     * @param productName Продукт по которому необходимы МСС (required)
     * @return Сокращенный список category (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal error (status code 500)
     */
    @ApiOperation(value = "", nickname = "adminApiV1CategoriesProductNameGet", notes = "", response = ShortCategories.class, authorizations = {
        
        @Authorization(value = "oAuth")
         }, tags={ "admin&#39;s categories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Сокращенный список category", response = ShortCategories.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not found", response = Error.class),
        @ApiResponse(code = 500, message = "Internal error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin/api/v1/categories/{productName}",
        produces = { "application/json" }
    )
    ResponseEntity<ShortCategories> adminApiV1CategoriesProductNameGet(@ApiParam(value = "Продукт по которому необходимы МСС", required = true, allowableValues = "ecom, a2c, c2a, safeDeal") @PathVariable("productName") String productName);

}
